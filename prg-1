/* write a java program to implement functions with different time complexities (e.g., linear, quadratic, logarithmic) and analyze their performance using asymptotic notations. */

import java.util.Arrays;
import java.util.Random;

public class TimeComplexityDemo {

    // Generate a random array of integers
    public static int[] generateRandomArray(int size, int maxValue) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(maxValue); // Random values between 0 and maxValue
        }
        return array;
    }

    // Linear Search: O(n)
    public static int linearSearch(int[] array, int target) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                return i; // Return index if target is found
            }
        }
        return -1; // Return -1 if not found
    }

    // Selection Sort: O(n^2)
    public static void selectionSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j; // Find the minimum element
                }
            }
            // Swap the minimum element with the first element
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

    // Binary Search: O(log n)
    public static int binarySearch(int[] array, int target) {
        int left = 0, right = array.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (array[mid] == target) {
                return mid; // Return index if target is found
            } else if (array[mid] < target) {
                left = mid + 1; // Search in the right half
            } else {
                right = mid - 1; // Search in the left half
            }
        }
        return -1; // Return -1 if not found
    }

    public static void main(String[] args) {
        int size = 100000; // Size of the array
        int maxValue = 1000000; // Maximum value in the array
        int[] array = generateRandomArray(size, maxValue);

        Random random = new Random();
        int target = random.nextInt(maxValue); // Generate a random target

        System.out.println("Analyzing time complexities for array size: " + size);

        // Linear Search
        long startTime = System.nanoTime();
        int result = linearSearch(array, target);
        long endTime = System.nanoTime();
        System.out.println("Linear Search (O(n)) execution time: " + (endTime - startTime) / 1e6 + " ms");

        // Selection Sort
        int[] arrayToSort = Arrays.copyOf(array, array.length); // Copy the array to preserve original order
        startTime = System.nanoTime();
        selectionSort(arrayToSort);
        endTime = System.nanoTime();
        System.out.println("Selection Sort (O(n^2)) execution time: " + (endTime - startTime) / 1e6 + " ms");

        // Binary Search
        startTime = System.nanoTime();
        result = binarySearch(arrayToSort, target);
        endTime = System.nanoTime();
        System.out.println("Binary Search (O(log n)) execution time: " + (endTime - startTime) / 1e6 + " ms");
    }
}


OutPut:

Analyzing time complexities for array size: 100000
Linear Search (O(n)) execution time: 4.0158 ms
Selection Sort (O(n^2)) execution time: 5903.6794 ms
Binary Search (O(log n)) execution time: 0.0106 ms

